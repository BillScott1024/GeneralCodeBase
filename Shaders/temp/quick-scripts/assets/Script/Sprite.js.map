{"version":3,"sources":["Sprite.js"],"names":["ShadersEnum","cc","Enum","Default","HighLight","Gray","ccShader_HighLight_Vert","require","ccShader_HighLight_Frag","ccShader_HighLight","ccShader_Gray_Vert","ccShader_Gray_Frag","ccShader_Gray","Class","extends","Component","properties","shaderType","default","type","notify","_updateShaderType","currState","visible","onLoad","_useDefault","_useHighLight","_useGray","kProgram","shaderCache","getProgram","SHADER_POSITION_TEXTURECOLOR","program","GLProgram","initWithVertexShaderByteArray","SHADER_POSITION_TEXTURE_COLOR_VERT","SHADER_POSITION_TEXTURE_COLOR_FRAG","addAttribute","ATTRIBUTE_NAME_POSITION","VERTEX_ATTRIB_POSITION","ATTRIBUTE_NAME_COLOR","VERTEX_ATTRIB_COLOR","ATTRIBUTE_NAME_TEX_COORD","VERTEX_ATTRIB_TEX_COORDS","link","updateUniforms","node","getComponent","Sprite","_sgNode","setShaderProgram","addProgram"],"mappings":"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","file":"Sprite.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["var ShadersEnum = cc.Enum({\n    Default: 0,\n    HighLight: 1,\n    Gray: 2,\n});\n\n/* ShadersEnum.HighLight */\nvar ccShader_HighLight_Vert = require(\"../Src/ccShader_HighLight_Vert.js\");\nvar ccShader_HighLight_Frag = require(\"../Src/ccShader_HighLight_Frag.js\");\nvar ccShader_HighLight = 'ccShader_HighLight';\n\n/* ShadersEnum.HighLight */\nvar ccShader_Gray_Vert = require(\"../Src/ccShader_Gray_Vert.js\");\nvar ccShader_Gray_Frag = require(\"../Src/ccShader_Gray_Frag.js\");\nvar ccShader_Gray = 'ccShader_Gray';\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: \n    {\n        shaderType:\n        {\n            default: ShadersEnum.Default,\n            type: ShadersEnum,\n            notify: function()\n            {\n                this._updateShaderType();\n            }\n        },\n        \n        currState:\n        {\n            default: ShadersEnum.Default,\n            type: ShadersEnum,\n            visible: false,\n        },\n    },\n\n    onLoad: function () \n    {\n        this.shaderType = ShadersEnum.Default;\n        this.currState = this.shaderType;\n        this._updateShaderType();\n    },\n    \n    /* 更新shader */\n    _updateShaderType: function()\n    {\n        if ( this.shaderType === this.currState ) { return; }\n        \n        switch( this.shaderType )\n        {\n            case ShadersEnum.Default:\n                this._useDefault();\n                break;\n            case ShadersEnum.HighLight:\n                this._useHighLight();\n                break;\n            case ShadersEnum.Gray:\n                this._useGray();\n                break;\n            default:\n                break;\n        }\n    },\n    \n    /* 使用默认 */\n    _useDefault: function()\n    {\n        /* 官方实现原图shader */\n        // var kProgram = cc.shaderCache.programForKey( cc.SHADER_POSITION_TEXTURECOLOR );\n        var kProgram = cc.shaderCache.getProgram(cc.SHADER_POSITION_TEXTURECOLOR); \n        \n        /* if 个人认为是多余的, 官方已实现好, 为了处理API相同, 这里还是写上了 */\n        if ( typeof kProgram === \"undefined\" )\n        {\n            var program = new cc.GLProgram();\n            program.initWithVertexShaderByteArray(cc.SHADER_POSITION_TEXTURE_COLOR_VERT, cc.SHADER_POSITION_TEXTURE_COLOR_FRAG);\n    \n            program.addAttribute(cc.ATTRIBUTE_NAME_POSITION, cc.VERTEX_ATTRIB_POSITION);\n            program.addAttribute(cc.ATTRIBUTE_NAME_COLOR, cc.VERTEX_ATTRIB_COLOR);\n            program.addAttribute(cc.ATTRIBUTE_NAME_TEX_COORD, cc.VERTEX_ATTRIB_TEX_COORDS);\n            program.link();\n            program.updateUniforms();  \n          //  cc.setProgram( this.node._sgNode, program );\n            this.node.getComponent(cc.Sprite)._sgNode.setShaderProgram(program);\n            /* 官方不用在添加 key 保存到 shaderCache 中 */\n            //cc.shaderCache.addProgram( program, ccShader_Default );\n        }\n        else\n        {\n            // cc.setProgram( this.node._sgNode, kProgram );\n            this.node.getComponent(cc.Sprite)._sgNode.setShaderProgram(kProgram)\n        }\n        \n        this.currState = this.shaderType;\n    },\n    \n    /* 使用高亮 */\n    _useHighLight: function()\n    {\n        // var kProgram = cc.shaderCache.programForKey( ccShader_HighLight ); \n        var kProgram = cc.shaderCache.getProgram(ccShader_HighLight);\n        if ( typeof kProgram === 'undefined' )\n        {\n            var program = new cc.GLProgram();\n            program.initWithVertexShaderByteArray(ccShader_HighLight_Vert, ccShader_HighLight_Frag);\n    \n            program.addAttribute(cc.ATTRIBUTE_NAME_POSITION, cc.VERTEX_ATTRIB_POSITION);\n            program.addAttribute(cc.ATTRIBUTE_NAME_COLOR, cc.VERTEX_ATTRIB_COLOR);\n            program.addAttribute(cc.ATTRIBUTE_NAME_TEX_COORD, cc.VERTEX_ATTRIB_TEX_COORDS);\n            program.link();\n            program.updateUniforms();  \n            // cc.setProgram( this.node._sgNode, program );\n            this.node.getComponent(cc.Sprite)._sgNode.setShaderProgram(program);\n            \n            cc.shaderCache.addProgram( program, ccShader_HighLight );\n        }\n        else\n        {\n            // cc.setProgram( this.node._sgNode, kProgram );\n            this.node.getComponent(cc.Sprite)._sgNode.setShaderProgram(kProgram);\n        }\n        \n        this.currState = this.shaderType;\n    },\n    \n    /* 使用置灰 */\n    _useGray: function()\n    {\n        // var kProgram = cc.shaderCache.programForKey( ccShader_Gray ); \n        var kProgram = cc.shaderCache.getProgram(ccShader_Gray);\n        if ( typeof kProgram === 'undefined' )\n        {\n            var program = new cc.GLProgram();\n            program.initWithVertexShaderByteArray(ccShader_Gray_Vert, ccShader_Gray_Frag);\n    \n            program.addAttribute(cc.ATTRIBUTE_NAME_POSITION, cc.VERTEX_ATTRIB_POSITION);\n            program.addAttribute(cc.ATTRIBUTE_NAME_COLOR, cc.VERTEX_ATTRIB_COLOR);\n            program.addAttribute(cc.ATTRIBUTE_NAME_TEX_COORD, cc.VERTEX_ATTRIB_TEX_COORDS);\n            program.link();\n            program.updateUniforms();  \n            // cc.setProgram( this.node._sgNode, program );\n            this.node.getComponent(cc.Sprite)._sgNode.setShaderProgram(program);\n            \n            cc.shaderCache.addProgram( program, ccShader_Gray );\n        }\n        else\n        {\n            // cc.setProgram( this.node._sgNode, kProgram );\n            this.node.getComponent(cc.Sprite)._sgNode.setShaderProgram(kProgram);\n        }\n        \n        this.currState = this.shaderType;\n    },\n\n});\n\n"]}